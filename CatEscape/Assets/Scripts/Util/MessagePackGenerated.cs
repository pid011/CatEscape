// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    using System;

    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(10)
            {
                { typeof((float x, float y)), 0 },
                { typeof(global::CatEscape.Network.GamePacket.PlayerRole), 1 },
                { typeof(global::CatEscape.Network.PacketType), 2 },
                { typeof(global::CatEscape.Network.ReplyPacket.Reasons), 3 },
                { typeof(global::CatEscape.Network.IPacket), 4 },
                { typeof(global::CatEscape.Network.CountdownPacket), 5 },
                { typeof(global::CatEscape.Network.GamePacket), 6 },
                { typeof(global::CatEscape.Network.InfoPacket), 7 },
                { typeof(global::CatEscape.Network.ReplyPacket), 8 },
                { typeof(global::CatEscape.Network.TimerPacket), 9 },
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.ValueTupleFormatter<float, float>();
                case 1: return new MessagePack.Formatters.CatEscape.Network.GamePacket_PlayerRoleFormatter();
                case 2: return new MessagePack.Formatters.CatEscape.Network.PacketTypeFormatter();
                case 3: return new MessagePack.Formatters.CatEscape.Network.ReplyPacket_ReasonsFormatter();
                case 4: return new MessagePack.Formatters.CatEscape.Network.IPacketFormatter();
                case 5: return new MessagePack.Formatters.CatEscape.Network.CountdownPacketFormatter();
                case 6: return new MessagePack.Formatters.CatEscape.Network.GamePacketFormatter();
                case 7: return new MessagePack.Formatters.CatEscape.Network.InfoPacketFormatter();
                case 8: return new MessagePack.Formatters.CatEscape.Network.ReplyPacketFormatter();
                case 9: return new MessagePack.Formatters.CatEscape.Network.TimerPacketFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.CatEscape.Network
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class GamePacket_PlayerRoleFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::CatEscape.Network.GamePacket.PlayerRole>
    {
        public void Serialize(ref MessagePackWriter writer, global::CatEscape.Network.GamePacket.PlayerRole value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::CatEscape.Network.GamePacket.PlayerRole Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::CatEscape.Network.GamePacket.PlayerRole)reader.ReadInt32();
        }
    }

    public sealed class PacketTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::CatEscape.Network.PacketType>
    {
        public void Serialize(ref MessagePackWriter writer, global::CatEscape.Network.PacketType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::CatEscape.Network.PacketType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::CatEscape.Network.PacketType)reader.ReadInt32();
        }
    }

    public sealed class ReplyPacket_ReasonsFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::CatEscape.Network.ReplyPacket.Reasons>
    {
        public void Serialize(ref MessagePackWriter writer, global::CatEscape.Network.ReplyPacket.Reasons value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::CatEscape.Network.ReplyPacket.Reasons Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::CatEscape.Network.ReplyPacket.Reasons)reader.ReadInt32();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.CatEscape.Network
{
    using System;
    using System.Buffers;
    using System.Collections.Generic;
    using MessagePack;

    public sealed class IPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::CatEscape.Network.IPacket>
    {
        private readonly Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>> typeToKeyAndJumpMap;
        private readonly Dictionary<int, int> keyToJumpMap;

        public IPacketFormatter()
        {
            this.typeToKeyAndJumpMap = new Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>>(5, global::MessagePack.Internal.RuntimeTypeHandleEqualityComparer.Default)
            {
                { typeof(global::CatEscape.Network.InfoPacket).TypeHandle, new KeyValuePair<int, int>(0, 0) },
                { typeof(global::CatEscape.Network.GamePacket).TypeHandle, new KeyValuePair<int, int>(1, 1) },
                { typeof(global::CatEscape.Network.ReplyPacket).TypeHandle, new KeyValuePair<int, int>(2, 2) },
                { typeof(global::CatEscape.Network.CountdownPacket).TypeHandle, new KeyValuePair<int, int>(3, 3) },
                { typeof(global::CatEscape.Network.TimerPacket).TypeHandle, new KeyValuePair<int, int>(4, 4) },
            };
            this.keyToJumpMap = new Dictionary<int, int>(5)
            {
                { 0, 0 },
                { 1, 1 },
                { 2, 2 },
                { 3, 3 },
                { 4, 4 },
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::CatEscape.Network.IPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            KeyValuePair<int, int> keyValuePair;
            if (value != null && this.typeToKeyAndJumpMap.TryGetValue(value.GetType().TypeHandle, out keyValuePair))
            {
                writer.WriteArrayHeader(2);
                writer.WriteInt32(keyValuePair.Key);
                switch (keyValuePair.Value)
                {
                    case 0:
                        options.Resolver.GetFormatterWithVerify<global::CatEscape.Network.InfoPacket>().Serialize(ref writer, (global::CatEscape.Network.InfoPacket)value, options);
                        break;
                    case 1:
                        options.Resolver.GetFormatterWithVerify<global::CatEscape.Network.GamePacket>().Serialize(ref writer, (global::CatEscape.Network.GamePacket)value, options);
                        break;
                    case 2:
                        options.Resolver.GetFormatterWithVerify<global::CatEscape.Network.ReplyPacket>().Serialize(ref writer, (global::CatEscape.Network.ReplyPacket)value, options);
                        break;
                    case 3:
                        options.Resolver.GetFormatterWithVerify<global::CatEscape.Network.CountdownPacket>().Serialize(ref writer, (global::CatEscape.Network.CountdownPacket)value, options);
                        break;
                    case 4:
                        options.Resolver.GetFormatterWithVerify<global::CatEscape.Network.TimerPacket>().Serialize(ref writer, (global::CatEscape.Network.TimerPacket)value, options);
                        break;
                    default:
                        break;
                }

                return;
            }

            writer.WriteNil();
        }

        public global::CatEscape.Network.IPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            if (reader.ReadArrayHeader() != 2)
            {
                throw new InvalidOperationException("Invalid Union data was detected. Type:global::CatEscape.Network.IPacket");
            }

            options.Security.DepthStep(ref reader);
            var key = reader.ReadInt32();

            if (!this.keyToJumpMap.TryGetValue(key, out key))
            {
                key = -1;
            }

            global::CatEscape.Network.IPacket result = null;
            switch (key)
            {
                case 0:
                    result = (global::CatEscape.Network.IPacket)options.Resolver.GetFormatterWithVerify<global::CatEscape.Network.InfoPacket>().Deserialize(ref reader, options);
                    break;
                case 1:
                    result = (global::CatEscape.Network.IPacket)options.Resolver.GetFormatterWithVerify<global::CatEscape.Network.GamePacket>().Deserialize(ref reader, options);
                    break;
                case 2:
                    result = (global::CatEscape.Network.IPacket)options.Resolver.GetFormatterWithVerify<global::CatEscape.Network.ReplyPacket>().Deserialize(ref reader, options);
                    break;
                case 3:
                    result = (global::CatEscape.Network.IPacket)options.Resolver.GetFormatterWithVerify<global::CatEscape.Network.CountdownPacket>().Deserialize(ref reader, options);
                    break;
                case 4:
                    result = (global::CatEscape.Network.IPacket)options.Resolver.GetFormatterWithVerify<global::CatEscape.Network.TimerPacket>().Deserialize(ref reader, options);
                    break;
                default:
                    reader.Skip();
                    break;
            }

            reader.Depth--;
            return result;
        }
    }


}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.CatEscape.Network
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class CountdownPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::CatEscape.Network.CountdownPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::CatEscape.Network.CountdownPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            formatterResolver.GetFormatterWithVerify<global::CatEscape.Network.PacketType>().Serialize(ref writer, value.Type, options);
            writer.Write(value.Id);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            writer.Write(value.IsHost);
            writer.Write(value.Countdown);
        }

        public global::CatEscape.Network.CountdownPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Type__ = default(global::CatEscape.Network.PacketType);
            var __Id__ = default(int);
            var __Name__ = default(string);
            var __IsHost__ = default(bool);
            var __Countdown__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Type__ = formatterResolver.GetFormatterWithVerify<global::CatEscape.Network.PacketType>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Id__ = reader.ReadInt32();
                        break;
                    case 2:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __IsHost__ = reader.ReadBoolean();
                        break;
                    case 4:
                        __Countdown__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::CatEscape.Network.CountdownPacket();
            ____result.Type = __Type__;
            ____result.Id = __Id__;
            ____result.Name = __Name__;
            ____result.IsHost = __IsHost__;
            ____result.Countdown = __Countdown__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GamePacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::CatEscape.Network.GamePacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::CatEscape.Network.GamePacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(8);
            formatterResolver.GetFormatterWithVerify<global::CatEscape.Network.PacketType>().Serialize(ref writer, value.Type, options);
            writer.Write(value.Id);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            writer.Write(value.IsHost);
            writer.Write(value.MaxHp);
            writer.Write(value.Hp);
            formatterResolver.GetFormatterWithVerify<(float x, float y)>().Serialize(ref writer, value.Position, options);
            formatterResolver.GetFormatterWithVerify<global::CatEscape.Network.GamePacket.PlayerRole>().Serialize(ref writer, value.Role, options);
        }

        public global::CatEscape.Network.GamePacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Type__ = default(global::CatEscape.Network.PacketType);
            var __Id__ = default(int);
            var __Name__ = default(string);
            var __IsHost__ = default(bool);
            var __MaxHp__ = default(int);
            var __Hp__ = default(int);
            var __Position__ = default((float x, float y));
            var __Role__ = default(global::CatEscape.Network.GamePacket.PlayerRole);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Type__ = formatterResolver.GetFormatterWithVerify<global::CatEscape.Network.PacketType>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Id__ = reader.ReadInt32();
                        break;
                    case 2:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __IsHost__ = reader.ReadBoolean();
                        break;
                    case 4:
                        __MaxHp__ = reader.ReadInt32();
                        break;
                    case 5:
                        __Hp__ = reader.ReadInt32();
                        break;
                    case 6:
                        __Position__ = formatterResolver.GetFormatterWithVerify<(float x, float y)>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __Role__ = formatterResolver.GetFormatterWithVerify<global::CatEscape.Network.GamePacket.PlayerRole>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::CatEscape.Network.GamePacket();
            ____result.Type = __Type__;
            ____result.Id = __Id__;
            ____result.Name = __Name__;
            ____result.IsHost = __IsHost__;
            ____result.MaxHp = __MaxHp__;
            ____result.Hp = __Hp__;
            ____result.Position = __Position__;
            ____result.Role = __Role__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class InfoPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::CatEscape.Network.InfoPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::CatEscape.Network.InfoPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            formatterResolver.GetFormatterWithVerify<global::CatEscape.Network.PacketType>().Serialize(ref writer, value.Type, options);
            writer.Write(value.Id);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            writer.Write(value.IsHost);
        }

        public global::CatEscape.Network.InfoPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Type__ = default(global::CatEscape.Network.PacketType);
            var __Id__ = default(int);
            var __Name__ = default(string);
            var __IsHost__ = default(bool);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Type__ = formatterResolver.GetFormatterWithVerify<global::CatEscape.Network.PacketType>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Id__ = reader.ReadInt32();
                        break;
                    case 2:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __IsHost__ = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::CatEscape.Network.InfoPacket();
            ____result.Type = __Type__;
            ____result.Id = __Id__;
            ____result.Name = __Name__;
            ____result.IsHost = __IsHost__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ReplyPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::CatEscape.Network.ReplyPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::CatEscape.Network.ReplyPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(6);
            formatterResolver.GetFormatterWithVerify<global::CatEscape.Network.PacketType>().Serialize(ref writer, value.Type, options);
            writer.Write(value.Id);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            writer.Write(value.IsHost);
            writer.Write(value.Result);
            formatterResolver.GetFormatterWithVerify<global::CatEscape.Network.ReplyPacket.Reasons>().Serialize(ref writer, value.Reason, options);
        }

        public global::CatEscape.Network.ReplyPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Type__ = default(global::CatEscape.Network.PacketType);
            var __Id__ = default(int);
            var __Name__ = default(string);
            var __IsHost__ = default(bool);
            var __Result__ = default(bool);
            var __Reason__ = default(global::CatEscape.Network.ReplyPacket.Reasons);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Type__ = formatterResolver.GetFormatterWithVerify<global::CatEscape.Network.PacketType>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Id__ = reader.ReadInt32();
                        break;
                    case 2:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __IsHost__ = reader.ReadBoolean();
                        break;
                    case 4:
                        __Result__ = reader.ReadBoolean();
                        break;
                    case 5:
                        __Reason__ = formatterResolver.GetFormatterWithVerify<global::CatEscape.Network.ReplyPacket.Reasons>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::CatEscape.Network.ReplyPacket();
            ____result.Type = __Type__;
            ____result.Id = __Id__;
            ____result.Name = __Name__;
            ____result.IsHost = __IsHost__;
            ____result.Result = __Result__;
            ____result.Reason = __Reason__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class TimerPacketFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::CatEscape.Network.TimerPacket>
    {

        public void Serialize(ref MessagePackWriter writer, global::CatEscape.Network.TimerPacket value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(6);
            formatterResolver.GetFormatterWithVerify<global::CatEscape.Network.PacketType>().Serialize(ref writer, value.Type, options);
            writer.Write(value.Id);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            writer.WriteNil();
            writer.Write(value.IsHost);
            writer.Write(value.Time);
        }

        public global::CatEscape.Network.TimerPacket Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Type__ = default(global::CatEscape.Network.PacketType);
            var __Id__ = default(int);
            var __Name__ = default(string);
            var __IsHost__ = default(bool);
            var __Time__ = default(int);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Type__ = formatterResolver.GetFormatterWithVerify<global::CatEscape.Network.PacketType>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Id__ = reader.ReadInt32();
                        break;
                    case 2:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __IsHost__ = reader.ReadBoolean();
                        break;
                    case 5:
                        __Time__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::CatEscape.Network.TimerPacket();
            ____result.Type = __Type__;
            ____result.Id = __Id__;
            ____result.Name = __Name__;
            ____result.IsHost = __IsHost__;
            ____result.Time = __Time__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

